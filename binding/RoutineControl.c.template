/*!
	@file   RoutineControl.c
	@brief  <brief description here>
	@t.odo	-
*/
/******************************************************************************
* Preprocessor Definitions & Macros
******************************************************************************/



/******************************************************************************
* Includes
******************************************************************************/

#include "lib_iso14229.h"

#include "drv_flash.h"
#include "lib_jmp.h"
#include "lib_ifm.h"

/******************************************************************************
* Enumerations, structures & Variables
******************************************************************************/


#define ADDR 0x08000000

/******************************************************************************
* Declaration | Static Functions
******************************************************************************/

/******************************************************************************
* Definition  | Static Functions
******************************************************************************/

static uint8_t routine_F001_jump_to_boot(void* _self, routine_command cmd, uint8_t* args,uint16_t sz)
{
#if defined(HAL_ICACHE_MODULE_ENABLED)
	HAL_ICACHE_Invalidate();
#endif
	uds_routine_local_id_t* self = (uds_routine_local_id_t* )_self;

	if(cmd != RTN_START)
	{
		self->sts = self->default_sts;
		return UDS_NRC_SFNS;
	}

	if(args != NULL || sz != 0)
	{
		self->sts = self->default_sts;
		return UDS_NRC_IMLOIF;
	}
	if((*(__IO uint32_t*)0x8020020) != 0x20030000)
	{
		self->sts = self->default_sts;
		return UDS_NRC_VMSCNC00;
	}

	NVIC_SystemReset();

	self->sts = self->default_sts;
	return 0;
}


static uint8_t routine_F000_programming_validation(void* _self, routine_command cmd, uint8_t* args,uint16_t sz)
{
#if defined(HAL_ICACHE_MODULE_ENABLED)
	HAL_ICACHE_Invalidate();
#endif
	uds_routine_local_id_t* self = (uds_routine_local_id_t* )_self;
	uint32_t start_address = 0;
	uint32_t length = 0;
	uint16_t fn_crc = 0;

	uint16_t flash_crc = 0xFFFF;

	if(cmd != RTN_START)
	{
		self->sts = self->default_sts;
		return UDS_NRC_SFNS;
	}

	if(args == NULL || sz != 9)
	{
		self->sts = self->default_sts;
		return UDS_NRC_IMLOIF;
	}

	start_address = ((uint32_t)args[0] << 24);
	start_address |= ((uint32_t)args[1] << 16);
	start_address |= ((uint32_t)args[2] << 8);
	start_address |= (uint32_t)args[3];

	length = 0;
	length |= ((uint32_t)args[4] << 16);
	length |= ((uint32_t)args[5] << 8);
	length |= (uint32_t)args[6];

	fn_crc = ((uint16_t)args[7] << 8);
	fn_crc |= (uint16_t)args[8];


	if(start_address < 0x8000000 || start_address>0x8020000 || (start_address+length)>0x8020000 )
	{
		self->sts = self->default_sts;
		return UDS_NRC_VMSCNC03;
	}

	flash_crc = crc16_ccitt(flash_crc, (uint8_t*)(start_address), length);


	if(flash_crc != fn_crc)
	{
		self->sts = self->default_sts;
		return UDS_NRC_VMSCNC00;
	}

	if((*(__IO uint32_t*)start_address) != 0x20030000)
	{
		self->sts = self->default_sts;
		return UDS_NRC_VMSCNC01;
	}

	if(ifm_invalidate_application_upgrade_info() != I_OK)
	{
		self->sts = self->default_sts;
		return UDS_NRC_VMSCNC02;
	}

	self->sts = self->default_sts;
	return 0;
}


static uint16_t rountine_0001_flash_erase_step = 0;
static uint16_t rountine_0001_flash_erase_max_steps = 0;
static uint8_t result[5] = {0};

static volatile uint32_t start_address = 0;
static volatile uint32_t end_address = 0;

static uint8_t rountine_FF00_flash_erase(void* _self, routine_command cmd, uint8_t* args,uint16_t sz)
{
#if defined(HAL_ICACHE_MODULE_ENABLED)
	HAL_ICACHE_Invalidate();
#endif
	uds_routine_local_id_t* self = (uds_routine_local_id_t* )_self;


	if(cmd != RTN_START && cmd != RTN_RESULT && cmd != RTN_CONTINUE)
	{
		self->sts = self->default_sts;
		return UDS_NRC_SFNS;
	}

	if(cmd == RTN_START && (args == NULL || sz != 8))
	{
		self->sts = self->default_sts;
		return UDS_NRC_IMLOIF;
	}

	if(cmd == RTN_RESULT && (args != NULL || sz != 0))
	{
		self->sts = self->default_sts;
		return UDS_NRC_IMLOIF;
	}

	if(cmd == RTN_START && self->sts == RTN_ACTIVE)
	{
		return UDS_NRC_RSE;
	}

	if(cmd == RTN_START)
	{
		start_address = ((uint32_t)args[0] << 24);
		start_address |= ((uint32_t)args[1] << 16);
		start_address |= ((uint32_t)args[2] << 8);
		start_address |= (uint32_t)args[3];
		end_address = ((uint32_t)args[4] << 24) | ((uint32_t)args[5] << 16) | ((uint32_t)args[6] << 8) | (uint32_t)args[7];
		__DSB();
		__ISB();
		start_address = start_address - (start_address % 0x800);
		end_address = end_address - (end_address % 0x800);

		if(start_address != ADDR_FLASH_PAGE_0  ||  end_address >= ADDR_FLASH_PAGE_64 || start_address > end_address)
		{
			self->sts = self->default_sts;
			return UDS_NRC_ROOR;
		}

		self->sts = RTN_ACTIVE;

		rountine_0001_flash_erase_step = 0;
		rountine_0001_flash_erase_max_steps =(end_address - start_address) / 0x800;
	}

	if(cmd == RTN_RESULT)
	{
		result[0] = self->sts;

		if(self->sts == RTN_ACTIVE)
		{
			result[1] = (rountine_0001_flash_erase_step & 0xFF00) >> 8;
			result[2] = (rountine_0001_flash_erase_step & 0x00FF) >> 0;
			result[3] = (rountine_0001_flash_erase_max_steps & 0xFF00) >> 8;
			result[4] = (rountine_0001_flash_erase_max_steps & 0x00FF) >> 0;
			self->rst_sz = 1;
		}
		else
		{
			self->rst_sz = 1;
		}
		self->rst = result;

		return 0;
	}

	if(cmd == RTN_CONTINUE)
	{
		if(rountine_0001_flash_erase_step <= rountine_0001_flash_erase_max_steps)
		{
			flash_erase_nb(start_address + (rountine_0001_flash_erase_step*0x800),1);
			rountine_0001_flash_erase_step++;
			return 0;
		}

		rountine_0001_flash_erase_step = 0;
		self->sts = RTN_INACTIVE;
		return 0;
	}


	return 0;
}

static uint8_t routine_F002_get_crc_from_to(void* _self, routine_command cmd, uint8_t* args,uint16_t sz)
{
#if defined(HAL_ICACHE_MODULE_ENABLED)
	HAL_ICACHE_Invalidate();
#endif
	uds_routine_local_id_t* self = (uds_routine_local_id_t* )_self;

	if(cmd != RTN_START)
	{
		self->rst_sz = 0;
		self->sts = self->default_sts;
		return UDS_NRC_SFNS;
	}

	if(cmd == RTN_START)
	{
		if(args == NULL || sz != 8)
		{
			self->sts = self->default_sts;
			return UDS_NRC_IMLOIF;
		}

		uint32_t start_address = 0;
		uint32_t end_address = 0;


		start_address = ((uint32_t)args[0] << 24);
		start_address |= ((uint32_t)args[1] << 16);
		start_address |= ((uint32_t)args[2] << 8);
		start_address |= (uint32_t)args[3];

		end_address = ((uint32_t)args[4] << 24);
		end_address |= ((uint32_t)args[5] << 16);
		end_address |= ((uint32_t)args[6] << 8);
		end_address |= (uint32_t)args[7];

		if(end_address < start_address)
		{
			self->sts = self->default_sts;
			return UDS_NRC_ROOR;
		}

		uint16_t mcrc = 0xFFFF;
		uint32_t size = end_address - start_address;

#if defined(HAL_ICACHE_MODULE_ENABLED)
	HAL_ICACHE_Invalidate();
#endif
		mcrc = crc16_ccitt(mcrc, (uint8_t*)start_address, size);
		result[0] = (uint8_t)((mcrc & 0xff00) >> 8);
		result[1] = (uint8_t)((mcrc & 0x00ff) >> 0);

		self->rst = result;
		self->rst_sz = 2;

		self->sts = self->default_sts;
		return 0;
	}

	if(cmd == RTN_CONTINUE || cmd == RTN_RESULT || cmd == RTN_STOP)
	{
		self->sts = self->default_sts;
		return UDS_NRC_SFNS;

	}

	return 0;
}

uds_routine_local_id_t uds_routines[] =
{
		{.id = 0xFF00, .session = UDS_DIAG_PRGS, .security_level = 0x09, .default_sts = RTN_INACTIVE, .sts = RTN_INACTIVE, .rountine = rountine_FF00_flash_erase},
		{.id = 0xF000, .session = UDS_DIAG_PRGS, .security_level = 0x09, .default_sts = RTN_INACTIVE, .sts = RTN_INACTIVE, .rountine = routine_F000_programming_validation},
		{.id = 0xF001, .session = UDS_DIAG_DS, .security_level = 0xFF, .default_sts = RTN_INACTIVE, .sts = RTN_INACTIVE, .rountine = routine_F001_jump_to_boot},
		{.id = 0xF002, .session = UDS_DIAG_DS, .security_level = 0xFF, .default_sts = RTN_INACTIVE, .sts = RTN_INACTIVE, .rountine = routine_F002_get_crc_from_to}
};

/******************************************************************************
* Definition  | Public Functions
******************************************************************************/


/******************************************************************************
* EOF - NO CODE AFTER THIS LINE
******************************************************************************/
